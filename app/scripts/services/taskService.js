// Generated by CoffeeScript 1.6.3
'use strict';
angular.module('tiwoApp').service('taskService', function($q) {
  var getNextId, getStorage, initStorage, setStorage, taskList, taskService, unique;
  unique = function(input) {
    var key, output, value, _i, _ref, _results;
    output = {};
    for (key = _i = 0, _ref = input.length; 0 <= _ref ? _i < _ref : _i > _ref; key = 0 <= _ref ? ++_i : --_i) {
      output[input[key]] = input[key];
    }
    _results = [];
    for (key in output) {
      value = output[key];
      _results.push(value);
    }
    return _results;
  };
  getNextId = function() {
    var item, items, max;
    items = getStorage();
    if (items.length === 0) {
      max = 1;
    } else {
      max = Math.max.apply(Math, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = items.length; _i < _len; _i++) {
          item = items[_i];
          _results.push(item.id);
        }
        return _results;
      })());
      max++;
    }
    return max;
  };
  taskList = [];
  initStorage = function() {
    return localStorage.taskList = JSON.stringify([]);
  };
  getStorage = function() {
    return JSON.parse(localStorage.taskList);
  };
  setStorage = function(item) {
    return localStorage.taskList = JSON.stringify(item);
  };
  taskService = (function() {
    function taskService() {
      if (!localStorage.taskList) {
        initStorage();
      }
      if (!taskList || taskList.length === 0) {
        taskList = getStorage();
      }
    }

    taskService.prototype.get = function(id) {
      var deferred, promise;
      deferred = $q.defer();
      promise = deferred.promise;
      if (!id) {
        deferred.resolve(taskList);
      } else {
        deferred.resolve(taskList.filter(function(x) {
          return x.id === id;
        }));
      }
      return deferred.promise;
    };

    taskService.prototype.add = function(item) {
      var deferred, promise;
      deferred = $q.defer();
      promise = deferred.promise;
      item.id = getNextId();
      taskList.push(item);
      setStorage(taskList);
      deferred.resolve(item);
      return deferred.promise;
    };

    taskService.prototype.clearAll = function() {
      initStorage();
      return taskList = [];
    };

    taskService.prototype.getTaskNames = function() {
      var deferred, item, promise, taskNames;
      deferred = $q.defer();
      promise = deferred.promise;
      taskNames = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = taskList.length; _i < _len; _i++) {
          item = taskList[_i];
          _results.push(item.taskName);
        }
        return _results;
      })();
      deferred.resolve(unique(taskNames));
      return deferred.promise;
    };

    taskService.prototype.update = function(item) {
      var deferred, promise;
      deferred = $q.defer();
      promise = deferred.promise;
      taskList = taskList.filter(function(x) {
        return x.id !== item.id;
      });
      taskList.push(item);
      setStorage(taskList);
      deferred.resolve(item);
      return deferred.promise;
    };

    return taskService;

  })();
  return new taskService();
});
