// Generated by CoffeeScript 1.6.3
'use strict';
angular.module('tiwoApp').service('timeService', function($q, $http) {
  var i, parseDate, rexp, timeService, trim;
  rexp = new RegExp("^" + "(?:" + "(1[0-2]|0?[1-9])" + "[/-]" + "(3[0,1]|[1,2][0-9]|0?[1-9])" + "(?:[/-]" + "(19[7-9][0-9]|2[0-9]{3}|[0-9]{2})" + ")?" + "\\s?" + ")?" + "(?:" + "(2[0-3]|1[0-9]|[1-9])" + "(?:[:]" + "([0-5][0-9])" + "(?:[:]" + "([0-5][0-9])" + ")?" + ")?" + "\\s?" + "(?:([aApP])[mM]?)?" + ")?$");
  i = {
    Month: 1,
    Day: 2,
    Year: 3,
    Hour: 4,
    Min: 5,
    Sec: 6,
    AMPM: 7
  };
  trim = function(s) {
    return s.replace(/^\s+|\s+$/g, "");
  };
  parseDate = function(strDate) {
    var day, hour, min, month, ms, parsed, ret, sec, year;
    strDate = trim(strDate);
    parsed = rexp.exec(strDate);
    if (!strDate || !parsed) {
      return null;
    }
    ret = new Date();
    year = ret.getFullYear();
    if (parsed[i.Year]) {
      switch (parsed[i.Year].length) {
        case 4:
          year = parseInt(parsed[i.Year], 10);
          break;
        case 2:
          year = year - (year % 100) + parseInt(parsed[i.Year], 10);
      }
    }
    month = (parsed[i.Month] ? parseInt(parsed[i.Month], 10) - 1 : ret.getMonth());
    day = (parsed[i.Day] ? parseInt(parsed[i.Day], 10) : ret.getDate());
    hour = (parsed[i.Hour] ? parseInt(parsed[i.Hour], 10) : 0);
    min = (parsed[i.Min] ? parseInt(parsed[i.Min], 10) : 0);
    sec = (parsed[i.Sec] ? parseInt(parsed[i.Sec], 10) : 0);
    ms = 0;
    ret.setFullYear(year, month, day);
    ret.setHours(hour, min, sec, ms);
    if (!parsed[i.AMPM]) {
      return ret;
    }
    if (hour > 12 && parsed[i.AMPM].toLowerCase() === "p") {
      ret.setHours(ret.getHours() + 12);
    } else if (hour < 12 && parsed[i.AMPM].toLowerCase() === "p") {
      ret.setHours(ret.getHours() + 12);
    } else {
      if (hour === 12 && parsed[i.AMPM].toLowerCase() === "a") {
        ret.setHours(ret.getHours() - 12);
      }
    }
    return ret;
  };
  timeService = (function() {
    function timeService() {}

    timeService.prototype.parseDate = function(inputTime) {
      var deferred, result;
      deferred = $q.defer();
      result = parseDate(inputTime);
      deferred.resolve(result);
      return deferred.promise;
    };

    timeService.prototype.dateDiff = function(startTime, endTime, format) {
      var DAY, HOUR, MIN, deferred, diff, mod;
      if (format == null) {
        format = "h";
      }
      DAY = 1000 * 60 * 60 * 24;
      HOUR = 1000 * 60 * 60;
      MIN = 1000 * 60;
      switch (format) {
        case "h":
          mod = HOUR;
          break;
        case "m":
          mod = MIN;
          break;
        case "d":
          mod = DAY;
          break;
        default:
          mod = 100;
      }
      deferred = $q.defer();
      diff = (endTime.getTime() - startTime.getTime()) / mod;
      deferred.resolve(diff);
      return deferred.promise;
    };

    return timeService;

  })();
  return new timeService();
});
